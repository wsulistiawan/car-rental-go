// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type MasterModel struct {
	ID               int     `json:"id"`
	Name             string  `json:"name"`
	Brand            string  `json:"brand"`
	Type             string  `json:"type"`
	Category         *string `json:"category,omitempty"`
	CylinderCapacity int     `json:"cylinderCapacity"`
	Fuel             string  `json:"fuel"`
	Year             *int    `json:"year,omitempty"`
	NumberOfDoor     int     `json:"numberOfDoor"`
	NumberOfSeat     int     `json:"numberOfSeat"`
	NumberOfSuitcase *int    `json:"numberOfSuitcase,omitempty"`
}

type MasterModelMutationParam struct {
	Name             string  `json:"name"`
	Brand            string  `json:"brand"`
	Type             string  `json:"type"`
	Category         *string `json:"category,omitempty"`
	CylinderCapacity int     `json:"cylinderCapacity"`
	Fuel             string  `json:"fuel"`
	Year             *int    `json:"year,omitempty"`
	NumberOfDoor     int     `json:"numberOfDoor"`
	NumberOfSeat     int     `json:"numberOfSeat"`
	NumberOfSuitcase *int    `json:"numberOfSuitcase,omitempty"`
}

type MasterModelQueryParam struct {
	ID       *int    `json:"id,omitempty"`
	Category *string `json:"category,omitempty"`
	Fuel     *string `json:"fuel,omitempty"`
	Year     *int    `json:"year,omitempty"`
}

type MasterUnit struct {
	ID                        *int    `json:"id,omitempty"`
	ModelID                   *int    `json:"modelId,omitempty"`
	Color                     *string `json:"color,omitempty"`
	VehicleIdentityNumber     *string `json:"vehicleIdentityNumber,omitempty"`
	EngineNumber              *string `json:"engineNumber,omitempty"`
	VehicleOwnershipNumber    *string `json:"vehicleOwnershipNumber,omitempty"`
	VehicleRegistrationNumber *string `json:"vehicleRegistrationNumber,omitempty"`
	ManufactureYear           *int    `json:"manufactureYear,omitempty"`
	RegistrationYear          *int    `json:"registrationYear,omitempty"`
	Status                    *string `json:"status,omitempty"`
}

type MasterUnitMutationParam struct {
	ModelID                   int        `json:"modelId"`
	Color                     *string    `json:"color,omitempty"`
	VehicleIdentityNumber     string     `json:"vehicleIdentityNumber"`
	EngineNumber              string     `json:"engineNumber"`
	VehicleOwnershipNumber    string     `json:"vehicleOwnershipNumber"`
	VehicleRegistrationNumber string     `json:"vehicleRegistrationNumber"`
	ManufactureYear           *int       `json:"manufactureYear,omitempty"`
	RegistrationYear          int        `json:"registrationYear"`
	Status                    UnitStatus `json:"status"`
}

type MasterUnitQueryParam struct {
	ID                        *int    `json:"id,omitempty"`
	ModelID                   *int    `json:"modelId,omitempty"`
	VehicleIdentityNumber     *string `json:"vehicleIdentityNumber,omitempty"`
	VehicleRegistrationNumber *string `json:"vehicleRegistrationNumber,omitempty"`
}

type Mutation struct {
}

type Order struct {
	ID         *int         `json:"id,omitempty"`
	UnitID     *int         `json:"unitId,omitempty"`
	UserID     *int         `json:"userId,omitempty"`
	Price      *int         `json:"price,omitempty"`
	PickupTime *time.Time   `json:"pickupTime,omitempty"`
	ReturnTime *time.Time   `json:"returnTime,omitempty"`
	Status     *OrderStatus `json:"status,omitempty"`
}

type OrderMutationParam struct {
	UnitID     *int         `json:"unitId,omitempty"`
	UserID     *int         `json:"userId,omitempty"`
	Price      *int         `json:"price,omitempty"`
	PickupTime *time.Time   `json:"pickupTime,omitempty"`
	ReturnTime *time.Time   `json:"returnTime,omitempty"`
	Status     *OrderStatus `json:"status,omitempty"`
}

type OrderQueryParam struct {
	ID *int `json:"id,omitempty"`
}

type Query struct {
}

type OrderStatus string

const (
	OrderStatusCreated OrderStatus = "CREATED"
	OrderStatusPaid    OrderStatus = "PAID"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusCreated,
	OrderStatusPaid,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusCreated, OrderStatusPaid:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UnitStatus string

const (
	UnitStatusOnBoarding UnitStatus = "ON_BOARDING"
	UnitStatusReady      UnitStatus = "READY"
	UnitStatusOnRent     UnitStatus = "ON_RENT"
	UnitStatusInactive   UnitStatus = "INACTIVE"
)

var AllUnitStatus = []UnitStatus{
	UnitStatusOnBoarding,
	UnitStatusReady,
	UnitStatusOnRent,
	UnitStatusInactive,
}

func (e UnitStatus) IsValid() bool {
	switch e {
	case UnitStatusOnBoarding, UnitStatusReady, UnitStatusOnRent, UnitStatusInactive:
		return true
	}
	return false
}

func (e UnitStatus) String() string {
	return string(e)
}

func (e *UnitStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnitStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UnitStatus", str)
	}
	return nil
}

func (e UnitStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
